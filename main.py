import os
import threading
from http.server import SimpleHTTPRequestHandler, HTTPServer
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters

TOKEN = os.getenv("BOT_TOKEN")

# H√†m x·ª≠ l√Ω khi nh·∫≠n file
async def get_direct_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file_obj = None
    file_name = None

    if update.message.document:  # t√†i li·ªáu: rar, zip, exe, pdf, docx, ...
        file_obj = update.message.document
        file_name = file_obj.file_name
    elif update.message.video:   # video
        file_obj = update.message.video
        file_name = "video.mp4"
    elif update.message.audio:   # audio
        file_obj = update.message.audio
        file_name = file_obj.file_name or "audio.mp3"
    elif update.message.photo:   # ·∫£nh (ch·ªâ khi g·ª≠i d·∫°ng file ·∫£nh g·ªëc)
        file_obj = update.message.photo[-1]
        file_name = "photo.jpg"

    if file_obj:
        new_file = await context.bot.get_file(file_obj.file_id)
        file_link = f"https://api.telegram.org/file/bot{TOKEN}/{new_file.file_path}"
        await update.message.reply_text(f"üìÇ {file_name}\nüîó {file_link}")
    else:
        # B·ªè qua tin nh·∫Øn kh√¥ng ph·∫£i file
        return

# Fake HTTP server ƒë·ªÉ Render kh√¥ng kill service
def run_http_server():
    port = int(os.getenv("PORT", 10000))  # Render c·∫•p bi·∫øn PORT
    server = HTTPServer(("0.0.0.0", port), SimpleHTTPRequestHandler)
    print(f"üåê Dummy HTTP server ch·∫°y ·ªü port {port}")
    server.serve_forever()

def main():
    # Ch·∫°y HTTP server n·ªÅn
    threading.Thread(target=run_http_server, daemon=True).start()

    # Ch·∫°y Telegram bot
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.ATTACHMENT, get_direct_link))
    print("ü§ñ Bot Telegram ƒëang ch·∫°y (polling)...")
    app.run_polling()

if __name__ == "__main__":
    main()
